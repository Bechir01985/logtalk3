.. index:: integer
.. _integer/0:

**object**

``integer``
===========

Integer data type predicates.

* author: Paulo Moura
* version: 1.53
* date: 2018/7/11
* compilation flags: ``static, context_switching_calls``

* extends:

  * ``public`` :ref:`number <number/0>`

Public interface
----------------

.. raw:: html

   <div id="between/3"> </div>

.. index:: between/3
.. _integer/0::between/3:

``between/3``
^^^^^^^^^^^^^

Returns integers in the interval defined by the two first arguments.

* compilation flags: ``static``
* template: ``between(Lower,Upper,Integer)``

* mode - number of proofs:

  * ``between(+integer,+integer,+integer)`` - ``zero_or_one``

  * ``between(+integer,+integer,-integer)`` - ``zero_or_more``


.. raw:: html

   <div id="plus/3"> </div>

.. index:: plus/3
.. _integer/0::plus/3:

``plus/3``
^^^^^^^^^^

Reversible integer sum. At least two of the arguments must be instantiated to integers.

* compilation flags: ``static``
* template: ``plus(I,J,Sum)``

* mode - number of proofs:

  * ``plus(+integer,+integer,?integer)`` - ``zero_or_one``

  * ``plus(+integer,?integer,+integer)`` - ``zero_or_one``

  * ``plus(?integer,+integer,+integer)`` - ``zero_or_one``


.. raw:: html

   <div id="succ/2"> </div>

.. index:: succ/2
.. _integer/0::succ/2:

``succ/2``
^^^^^^^^^^

Successor of a natural number. At least one of the arguments must be instantiated to a natural number.

* compilation flags: ``static``
* template: ``succ(I,J)``

* mode - number of proofs:

  * ``succ(+integer,?integer)`` - ``zero_or_one``

  * ``succ(?integer,+integer)`` - ``zero_or_one``


.. raw:: html

   <div id="sequence/3"> </div>

.. index:: sequence/3
.. _integer/0::sequence/3:

``sequence/3``
^^^^^^^^^^^^^^

Generates a list with the sequence of all integers in the interval [Inf, Sup], assuming Inf =< Sup.

* compilation flags: ``static``
* template: ``sequence(Inf,Sup,List)``

* mode - number of proofs:

  * ``sequence(+integer,+integer,-list(integer))`` - ``zero_or_one``


Protected interface
-------------------

(see related entities)

Private predicates
------------------

(see related entities)

Operators
---------

(none)

Remarks
-------

(none)

See also
--------

(none)

