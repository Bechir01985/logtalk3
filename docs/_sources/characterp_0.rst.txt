.. index:: characterp
.. _characterp/0:

**protocol**

``characterp``
==============

Character protocol.

* author: Paulo Moura
* version: 1.2
* date: 2011/2/19
* compilation flags: ``static``

(no dependencies on other entities)


Public interface
----------------

.. raw:: html

   <div id="is_ascii/1"> </div>

.. index:: is_ascii/1
.. _characterp/0::is_ascii/1:

``is_ascii/1``
^^^^^^^^^^^^^^

True if the argument is an ASCII character.

* compilation flags: ``static``
* template: ``is_ascii(Char)``

* mode - number of proofs:

  * ``is_ascii(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_alphanumeric/1"> </div>

.. index:: is_alphanumeric/1
.. _characterp/0::is_alphanumeric/1:

``is_alphanumeric/1``
^^^^^^^^^^^^^^^^^^^^^

True if the argument is an alphanumeric character.

* compilation flags: ``static``
* template: ``is_alphanumeric(Char)``

* mode - number of proofs:

  * ``is_alphanumeric(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_alpha/1"> </div>

.. index:: is_alpha/1
.. _characterp/0::is_alpha/1:

``is_alpha/1``
^^^^^^^^^^^^^^

True if the argument is a letter or an underscore.

* compilation flags: ``static``
* template: ``is_alpha(Char)``

* mode - number of proofs:

  * ``is_alpha(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_letter/1"> </div>

.. index:: is_letter/1
.. _characterp/0::is_letter/1:

``is_letter/1``
^^^^^^^^^^^^^^^

True if the argument is a letter.

* compilation flags: ``static``
* template: ``is_letter(Char)``

* mode - number of proofs:

  * ``is_letter(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_bin_digit/1"> </div>

.. index:: is_bin_digit/1
.. _characterp/0::is_bin_digit/1:

``is_bin_digit/1``
^^^^^^^^^^^^^^^^^^

True if the argument is a binary digit.

* compilation flags: ``static``
* template: ``is_bin_digit(Char)``

* mode - number of proofs:

  * ``is_bin_digit(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_octal_digit/1"> </div>

.. index:: is_octal_digit/1
.. _characterp/0::is_octal_digit/1:

``is_octal_digit/1``
^^^^^^^^^^^^^^^^^^^^

True if the argument is an octal digit.

* compilation flags: ``static``
* template: ``is_octal_digit(Char)``

* mode - number of proofs:

  * ``is_octal_digit(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_dec_digit/1"> </div>

.. index:: is_dec_digit/1
.. _characterp/0::is_dec_digit/1:

``is_dec_digit/1``
^^^^^^^^^^^^^^^^^^

True if the argument is a decimal digit.

* compilation flags: ``static``
* template: ``is_dec_digit(Char)``

* mode - number of proofs:

  * ``is_dec_digit(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_hex_digit/1"> </div>

.. index:: is_hex_digit/1
.. _characterp/0::is_hex_digit/1:

``is_hex_digit/1``
^^^^^^^^^^^^^^^^^^

True if the argument is an hexadecimal digit.

* compilation flags: ``static``
* template: ``is_hex_digit(Char)``

* mode - number of proofs:

  * ``is_hex_digit(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_lower_case/1"> </div>

.. index:: is_lower_case/1
.. _characterp/0::is_lower_case/1:

``is_lower_case/1``
^^^^^^^^^^^^^^^^^^^

True if the argument is a lower case letter.

* compilation flags: ``static``
* template: ``is_lower_case(Char)``

* mode - number of proofs:

  * ``is_lower_case(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_upper_case/1"> </div>

.. index:: is_upper_case/1
.. _characterp/0::is_upper_case/1:

``is_upper_case/1``
^^^^^^^^^^^^^^^^^^^

True if the argument is a upper case letter.

* compilation flags: ``static``
* template: ``is_upper_case(Char)``

* mode - number of proofs:

  * ``is_upper_case(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_vowel/1"> </div>

.. index:: is_vowel/1
.. _characterp/0::is_vowel/1:

``is_vowel/1``
^^^^^^^^^^^^^^

True if the argument is a vowel.

* compilation flags: ``static``
* template: ``is_vowel(Char)``

* mode - number of proofs:

  * ``is_vowel(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_white_space/1"> </div>

.. index:: is_white_space/1
.. _characterp/0::is_white_space/1:

``is_white_space/1``
^^^^^^^^^^^^^^^^^^^^

True if the argument is a white space character (a space or a tab) inside a line of characters.

* compilation flags: ``static``
* template: ``is_white_space(Char)``

* mode - number of proofs:

  * ``is_white_space(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_layout/1"> </div>

.. index:: is_layout/1
.. _characterp/0::is_layout/1:

``is_layout/1``
^^^^^^^^^^^^^^^

True if the argument is a layout character.

* compilation flags: ``static``
* template: ``is_layout(Char)``

* mode - number of proofs:

  * ``is_layout(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_quote/1"> </div>

.. index:: is_quote/1
.. _characterp/0::is_quote/1:

``is_quote/1``
^^^^^^^^^^^^^^

True if the argument is a quote character.

* compilation flags: ``static``
* template: ``is_quote(Char)``

* mode - number of proofs:

  * ``is_quote(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_punctation/1"> </div>

.. index:: is_punctation/1
.. _characterp/0::is_punctation/1:

``is_punctation/1``
^^^^^^^^^^^^^^^^^^^

True if the argument is a sentence punctation character.

* compilation flags: ``static``
* template: ``is_punctation(Char)``

* mode - number of proofs:

  * ``is_punctation(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_period/1"> </div>

.. index:: is_period/1
.. _characterp/0::is_period/1:

``is_period/1``
^^^^^^^^^^^^^^^

True if the argument is a character that ends a sentence.

* compilation flags: ``static``
* template: ``is_period(Char)``

* mode - number of proofs:

  * ``is_period(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_control/1"> </div>

.. index:: is_control/1
.. _characterp/0::is_control/1:

``is_control/1``
^^^^^^^^^^^^^^^^

True if the argument is an ASCII control character.

* compilation flags: ``static``
* template: ``is_control(Char)``

* mode - number of proofs:

  * ``is_control(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_newline/1"> </div>

.. index:: is_newline/1
.. _characterp/0::is_newline/1:

``is_newline/1``
^^^^^^^^^^^^^^^^

True if the argument is the ASCII newline character.

* compilation flags: ``static``
* template: ``is_newline(Char)``

* mode - number of proofs:

  * ``is_newline(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="is_end_of_line/1"> </div>

.. index:: is_end_of_line/1
.. _characterp/0::is_end_of_line/1:

``is_end_of_line/1``
^^^^^^^^^^^^^^^^^^^^

True if the argument is the ASCII end-of-line character (either a carriage return or a line feed).

* compilation flags: ``static``
* template: ``is_end_of_line(Char)``

* mode - number of proofs:

  * ``is_end_of_line(+char)`` - ``zero_or_one``


.. raw:: html

   <div id="parenthesis/2"> </div>

.. index:: parenthesis/2
.. _characterp/0::parenthesis/2:

``parenthesis/2``
^^^^^^^^^^^^^^^^^

Recognises and converts between open and close parenthesis.

* compilation flags: ``static``
* template: ``parenthesis(Char1,Char2)``

* mode - number of proofs:

  * ``parenthesis(?char,?char)`` - ``zero_or_more``

  * ``parenthesis(+char,?char)`` - ``zero_or_one``

  * ``parenthesis(?char,+char)`` - ``zero_or_one``


.. raw:: html

   <div id="lower_upper/2"> </div>

.. index:: lower_upper/2
.. _characterp/0::lower_upper/2:

``lower_upper/2``
^^^^^^^^^^^^^^^^^

Recognises and converts between lower and upper case letters.

* compilation flags: ``static``
* template: ``lower_upper(Char1,Char2)``

* mode - number of proofs:

  * ``lower_upper(?char,?char)`` - ``zero_or_more``

  * ``lower_upper(+char,?char)`` - ``zero_or_one``

  * ``lower_upper(?char,+char)`` - ``zero_or_one``


Protected interface
-------------------

(none)

Private predicates
------------------

(none)

Operators
---------

(none)

Remarks
-------

(none)

See also
--------

(none)

